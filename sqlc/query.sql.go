// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package sqlc

import (
	"context"
)

const getScene = `-- name: GetScene :one
SELECT description, body
FROM scenes
WHERE workid = $1
  AND act = $2
  AND scene = $3
`

type GetSceneParams struct {
	Workid string `json:"workid"`
	Act    int32  `json:"act"`
	Scene  int32  `json:"scene"`
}

type GetSceneRow struct {
	Description string `json:"description"`
	Body        string `json:"body"`
}

func (q *Queries) GetScene(ctx context.Context, arg *GetSceneParams) (*GetSceneRow, error) {
	row := q.db.QueryRowContext(ctx, getScene, arg.Workid, arg.Act, arg.Scene)
	var i GetSceneRow
	err := row.Scan(&i.Description, &i.Body)
	return &i, err
}

const getWork = `-- name: GetWork :one
SELECT title
FROM works
WHERE workid = $1
`

func (q *Queries) GetWork(ctx context.Context, workid string) (string, error) {
	row := q.db.QueryRowContext(ctx, getWork, workid)
	var title string
	err := row.Scan(&title)
	return title, err
}

const search = `-- name: Search :many
SELECT workid,
       act,
       scene,
       description,
       body,
       ts_headline(body, websearch_to_tsquery($1))::text AS headline
      FROM scenes
      WHERE fts_doc_en @@ websearch_to_tsquery($1)
`

type SearchRow struct {
	Workid      string `json:"workid"`
	Act         int32  `json:"act"`
	Scene       int32  `json:"scene"`
	Description string `json:"description"`
	Body        string `json:"body"`
	Headline    string `json:"headline"`
}

func (q *Queries) Search(ctx context.Context, websearchToTsquery string) ([]*SearchRow, error) {
	rows, err := q.db.QueryContext(ctx, search, websearchToTsquery)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*SearchRow{}
	for rows.Next() {
		var i SearchRow
		if err := rows.Scan(
			&i.Workid,
			&i.Act,
			&i.Scene,
			&i.Description,
			&i.Body,
			&i.Headline,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
